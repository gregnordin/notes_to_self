
# Purpose

Install and learn to use [The FEniCSx computing platform](https://fenicsproject.org/) for doing finite element analysis of coupled partial differential equations. 

[2023 DOLFINx Documentation](https://docs.fenicsproject.org/dolfinx/main/python/index.html) - DOLFINx is the next generation problem solving interface of the FEniCS Project.

# Installation

## Docker

Official Docker images are at [DockerHub dolfinx](https://hub.docker.com/u/dolfinx). The Dockerfile used to build the stable and lab images are in [docker/Dockerfile.end-user](https://github.com/FEniCS/dolfinx/blob/main/docker/Dockerfile.end-user).

The [FEniCS Tutorial](https://jsdokken.com/dolfinx-tutorial/fem.html)has further useful information about [Obtaining the software](https://jsdokken.com/dolfinx-tutorial/fem.html#obtaining-the-software) using Docker.

### Current version 

Follow `Binary -> Docker images` at [DOLFINx](https://github.com/FEniCS/dolfinx)

#### Plain vanilla terminal interface

```
# After updating my local docker installation:
$ docker --version
Docker version 24.0.6, build ed223bc

$ docker run -ti dolfinx/dolfinx:stable
Unable to find image 'dolfinx/dolfinx:stable' locally
stable: Pulling from dolfinx/dolfinx
10175de2f0c4: Pull complete
4f4fb700ef54: Pull complete
d37041ac65bd: Pull complete
62d16fa7c9f1: Pull complete
76c0510709e0: Pull complete
d4348c9b3822: Pull complete
7c80c5bf8b96: Pull complete
b66abed3b008: Pull complete
1bbf06526e49: Pull complete
b3685093caaa: Pull complete
7dc3adbba300: Pull complete
3ecfafe34216: Pull complete
8d3ee65d16e7: Pull complete
f56046509264: Pull complete
Digest: sha256:e0e7543f09157d33458a07e72234b643fa80d64a3f28f2b0b1a86189dac42f45
Status: Downloaded newer image for dolfinx/dolfinx:stable

root@53f74472d761:~# which python
root@53f74472d761:~# python --version
bash: python: command not found

root@53f74472d761:~# pwd
/root
root@53f74472d761:~# ls -al
total 32
drwx------ 1 root root 4096 Jan 24  2023 .
drwxr-xr-x 1 root root 4096 Oct  5 21:19 ..
-rw-r--r-- 1 root root 3106 Oct 15  2021 .bashrc
drwxr-xr-x 1 root root 4096 Jan 24  2023 .cache
drwxr-xr-x 3 root root 4096 Jan 24  2023 .cmake
drwxr-xr-x 4 root root 4096 Jan 24  2023 .config
-rw-r--r-- 1 root root  161 Jul  9  2019 .profile
-rw-r--r-- 1 root root  367 Jan 24  2023 .wget-hsts

root@53f74472d761:~# exit
```
#### Startup with JupyterLab

**Note that this uses a different Docker image.**

```
docker run --init -ti -p 8888:8888 dolfinx/lab:stable  # Access at http://localhost:8888
# Options
# -i: Keep STDIN open even if not attached
# -t: Allocate a pseudo-tty (terminal)
# -p: Publish a container's port to the host. Format is hostPort:containerPort
# --init: You can use the --init flag to indicate that an init process should be used as the PID 1 in the container. Specifying an init process ensures the usual responsibilities of an init system, such as reaping zombie processes, are performed inside the created container.

# Below is the key output in the terminal. Use one of these links in a browser window to connect to the container's jupyter server.
    To access the server, open this file in a browser:
        file:///root/.local/share/jupyter/runtime/jpserver-7-open.html
    Or copy and paste one of these URLs:
        http://30838c5da574:8888/lab?token=60fcc9f8839f08b1847e8a4b0a46698b2f86c17d6ba8674e
     or http://127.0.0.1:8888/lab?token=60fcc9f8839f08b1847e8a4b0a46698b2f86c17d6ba8674e
```

I copied and pasted the last line above into a browser window and got the usual JupyterLab interface. I created a new notebook, `Untitled.ipynb`, and ran

```
import dolfinx
print(f"DOLFINx version: {dolfinx.__version__} based on GIT commit: {dolfinx.git_commit_hash} of https://github.com/FEniCS/dolfinx/")
```

And got the output

```
DOLFINx version: 0.6.0 based on GIT commit: 24f86a9ce57df6978070dbee22b3eae8bb77235f of https://github.com/FEniCS/dolfinx/
```

So, it looks like it's working. Here is the file system info from within the notebook, `Untitled.ipynb`:

```
!pwd
    /root
!ls -al
    total 52
    drwx------ 1 root root 4096 Oct  5 19:35 .
    drwxr-xr-x 1 root root 4096 Oct  5 19:31 ..
    -rw-r--r-- 1 root root 3106 Oct 15  2021 .bashrc
    drwxr-xr-x 1 root root 4096 Jan 24  2023 .cache
    drwxr-xr-x 3 root root 4096 Jan 24  2023 .cmake
    drwxr-xr-x 4 root root 4096 Jan 24  2023 .config
    drwxr-xr-x 2 root root 4096 Oct  5 19:34 .ipynb_checkpoints
    drwxr-xr-x 3 root root 4096 Oct  5 19:34 .ipython
    drwxr-xr-x 3 root root 4096 Oct  5 19:34 .jupyter
    drwxr-xr-x 3 root root 4096 Oct  5 19:31 .local
    -rw-r--r-- 1 root root  161 Jul  9  2019 .profile
    -rw-r--r-- 1 root root  367 Jan 24  2023 .wget-hsts
    -rw-r--r-- 1 root root 1187 Oct  5 19:35 Untitled.ipynb
!ls /
    bin   dev  home  media	opt   root  sbin  sys  usr
    boot  etc  lib	 mnt	proc  run   srv   tmp  var
```

#### Startup with Jupyterlab and shared local directory &larr; USE THIS!

Follow [Tutorial compatible docker images](https://jsdokken.com/dolfinx-tutorial/fem.html#tutorial-compatible-docker-images).

```
docker run --init -ti -p 8888:8888 -v $(pwd):/root/shared dolfinx/lab:stable  # Access at http://localhost:8888
```

This works great! Note that the container directory is `/root/shared`. The `shared` is automatically created inside `root` when the container is started.

Now `vtk` and `pyvista` need to be installed. On an M1 mac, `pip install pyvista` on its own fails because the official VTK channel does not supply an M1 mac version for pip installation. Instead, do the following:

```
# Install special M1 mac VTK version from github:
python3 -m pip install "https://github.com/finsberg/vtk-aarch64/releases/download/vtk-9.2.6-cp310/vtk-9.2.6.dev0-cp310-cp310-linux_aarch64.whl"

# Now install pyvista:
pip install pyvista
```

In a jupyter notebook, remember to precede each of the above commands with `!` to execute them.


### Tutorial Docker version

```
# This version makes the base directory /lib, which is not helpful.
# docker run --init -p 8888:8888 -v "$(pwd)":/root/shared ghcr.io/jorgensd/dolfinx-tutorial:v0.6.0

# This version makes the base directory /root/shared, which is the local host directory and is the desired behavior.
docker run --init -p 8888:8888 -v "$(pwd)":/root/shared -w /root/shared ghcr.io/jorgensd/dolfinx-tutorial:v0.6.0
```

Tried running code at [Tutorial - Implementation](https://jsdokken.com/dolfinx-tutorial/chapter1/fundamentals_code.html#implementation) in a new notebook I created. Everything ran (that is, after I selected the the `Python 3 (ipykernel)` kernel) until got to `import pyvista`, which was not installed. Could not pip install it because vtk lacking.

Opened Github issue [pip install pyvista fail #144](https://github.com/jorgensd/dolfinx-tutorial/issues/144) and jorgensd responded:

>As you can see by the output, the issue is that VTK does not supply binaries on modern macs (ref: KitwareMedical/VTKPythonPackage#42).
>@finsberg has made a mac-binary of VTK, which can be installed as described in: KitwareMedical/VTKPythonPackage#42 (comment)

**Installing @finsberg's instruction, I can install pyvista and the first tutorial now fully runs. The same process should fix the lab and non-lab versions.**

Here is the command that successfully installs vtk, after which pyvista can be installed:

    python3 -m pip install "https://github.com/finsberg/vtk-aarch64/releases/download/vtk-9.2.6-cp310/vtk-9.2.6.dev0-cp310-cp310-linux_aarch64.whl"


### Try to get `pyvista` installed and working

- lab version &rarr; pyvista missing and get errors when pip install it or vtk.
- Try tutorial version again and see if pyvista is installed.
  - `import pyvista` shows it is not installed.
  - Try pip install pyvista and vtk separately and get the same errors.
  - ~~Make notebook in /root/shared/ to try stuff.~~
- Try non-lab version and see if pyvista is installed.
  - **Result:** Not installed, try pip install pyvista and vtk separately and get the same errors.


### 2016 Version

[FEniCS in Docker](https://fenics.readthedocs.io/projects/containers/en/latest/#)


## New conda approach

The reason why the approach below failed is that I am running a mac-Intel version of conda so when fenicsx tries to run arm64 commands, it came across one that Rosetta cannot emulate.

**Possible solutions:**

- Get rid of `conda` and install the arm version. But if I'm going to do this, I might as well go with `mamba`. However, I will likely have to re-do all of my virtual environments.
- Create an arm-specific virtual environment.

**Actual solution:**

Go with the 2nd option.

```
conda create --override-channels -c conda-forge/osx-arm64 -c conda-forge/noarch -n fenics_v06 fenics-dolfinx=0.6
conda activate fenics_v06

# At this point I started a python REPL and successfull imported dolfinx
$ python
Python 3.10.12 | packaged by conda-forge | (main, Jun 23 2023, 22:41:52) [Clang 15.0.7 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import dolfinx
>>> dolfinx.__version__
'0.6.0'
>>> exit()

# Install pyvista and check that it successfully imports
conda install -c conda-forge/osx-arm64 pyvista
$ python
Python 3.10.12 | packaged by conda-forge | (main, Jun 23 2023, 22:41:52) [Clang 15.0.7 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import pyvista
>>> import dolfinx
>>> pyvista.__version__
'0.42.3'
>>> dolfinx.__version__
'0.6.0'
>>> exit()

# Likewise mpich
conda install -c conda-forge/osx-arm64 mpich
  Collecting package metadata (current_repodata.json): done
  Solving environment: done
  # All requested packages already installed.
```

Now run `1-Poisson_equation.py` and see what happens.

```
(fenics_v06)
nordin@ECEns-MBP-4 ~/Documents/Projects/notes_to_self/fenicsx/Tutorials (master)*
$ python 1-Poisson_equation.py
# Whole bunch of INFO:root:clang messages
# ...
Error_L2 : 8.24e-03
Error_max : 2.22e-15
```

Run it again.

```
(fenics_v06)
nordin@ECEns-MBP-4 ~/Documents/Projects/notes_to_self/fenicsx/Tutorials (master)*
$ python 1-Poisson_equation.py
Error_L2 : 8.24e-03
Error_max : 2.22e-15
```

Now everything runs just fine.


## ~~conda~~ &rarr; Failed

Follow `Binary -> conda` at [DOLFINx](https://github.com/FEniCS/dolfinx)

```
(base)
$ python --version
Python 3.10.11

conda create -n fenicsx-env
conda activate fenicsx-env
conda install -c conda-forge fenics-dolfinx mpich pyvista
    Collecting package metadata (current_repodata.json): done
    Solving environment: unsuccessful initial attempt using frozen solve. Retrying with flexible solve.
    Solving environment: unsuccessful attempt using repodata from current_repodata.json, retrying with next repodata source.
    Collecting package metadata (repodata.json): done
    Solving environment: done

(fenicsx-env)
$ which python
/Users/nordin/opt/miniconda3/envs/fenicsx-env/bin/python
(fenicsx-env)
$ python --version
Python 3.10.12

(fenicsx-env)
$ python
Python 3.10.12 | packaged by conda-forge | (main, Jun 23 2023, 22:39:40) [Clang 15.0.7 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import dolfinx
Illegal instruction: 4
(fenicsx-env)
$
```

See discussion in [FEniCSx Slack channel](https://app.slack.com/client/T1AFBGYP2/C1AFSEWKU) on and around 10/6/23. I put a comment there too.

## Remember these

```
echo $SHELL
env | grep CONDA
```

# Log

## Wed, 10/11/23

Get free online book [Introduction to Numerical Methods for Variational Problems by Hans Petter Langtangen and Kent-Andre Mardal](https://github.com/hplgit/fem-book). Read first chapter, "Quick overview of the finite element method", which is extremely helpful to start understanding the finite element method as implemented in FEniCSx.

Go through [Solving the Poisson equation](https://jsdokken.com/dolfinx-tutorial/chapter1/fundamentals.html#solving-the-poisson-equation) and [Implementation](https://jsdokken.com/dolfinx-tutorial/chapter1/fundamentals_code.html#) to understand how the quick overview FEM material relates to the Tutorial 1 code.

Start going through [Deflection of a membrane](https://jsdokken.com/dolfinx-tutorial/chapter1/membrane.html) and [Implementation](https://jsdokken.com/dolfinx-tutorial/chapter1/membrane_code.html), which is Tutorial 2.
